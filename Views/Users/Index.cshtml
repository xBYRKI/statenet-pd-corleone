@model IEnumerable<statenet_lspd.ViewModels.UserWithRolesViewModel>
@using Microsoft.AspNetCore.Identity
@using statenet_lspd.Helpers
@using System.Security.Claims
@using statenet_lspd.Models
@inject RoleManager<ApplicationRole> RoleManager

@{
    ViewData["Title"] = "Benutzerverwaltung";
    // Aktuelle Filter- und Sortierwerte
    var searchTerm = Context.Request.Query["search"].ToString();
    var onlyDiscordVal = Context.Request.Query["onlyDiscord"].ToString();
    var sortField = (string?)(ViewBag.SortField ?? "Dienstnummer");
    var sortDir   = (string?)(ViewBag.SortDir ?? "asc");
    // Pagination
    var currentPage = (int)(ViewBag.PageNumber ?? 1);
    var totalPages  = (int)(ViewBag.TotalPages  ?? 1);
}

<div class="max-w-7xl mx-auto mt-10 px-6 py-8 bg-white dark:bg-gray-800 rounded-lg shadow-md">
    <!-- Header und Filter -->
    <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        <div class="flex flex-col">
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-1 flex items-center gap-2">
                <i class="fa-solid fa-building-user text-purple-600 dark:text-purple-400"></i>
                Benutzerverwaltung
            </h1>
            <p class="text-sm text-gray-500 dark:text-gray-400">Verwalte alle Benutzer im LSPD</p>
            <p class="text-sm text-red-500 dark:text-red-400">Achtung!-- Hier können alle Einstellungen des Benutzers verändert werden, dies ist NICHT die Mitarbeiterverwaltung!</p>
        </div>
        <div class="mt-4 md:mt-0">
            <button onclick="openCreateUserModal()" class="inline-flex items-center bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded shadow text-sm font-medium transition">
                <i class="fa-solid fa-user-plus mr-2"></i> Neuen Benutzer anlegen
            </button>
        </div>
    </div>

    <form method="get" class="flex flex-col md:flex-row md:items-center gap-4 mb-6">
        <input name="search" value="@searchTerm" type="text" placeholder="Name, Benutzername, Discord-ID oder Dienstnummer suchen..."
               class="flex-1 p-2 border rounded shadow-sm bg-white dark:bg-gray-700 dark:text-white" />
        <label class="inline-flex items-center space-x-2 text-sm text-gray-700 dark:text-gray-300">
            <input type="checkbox" name="onlyDiscord" value="true" @(onlyDiscordVal=="true"?"checked":"") class="rounded border-gray-300 dark:border-gray-600" />
            <span>Nur mit Discord-ID</span>
        </label>
        <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded shadow-sm transition">
            <i class="fa-solid fa-filter mr-1"></i> Filtern
        </button>
    </form>

    <!-- Tabelle mit Sortier-Links -->
    <div class="overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700">
        <table class="min-w-full table-auto text-sm">
            <thead class="bg-gray-50 dark:bg-gray-700 text-gray-600 dark:text-gray-200">
                <tr>
                    <th class="px-4 py-3 text-left">
                        <a href="?page=1&search=@searchTerm&onlyDiscord=@onlyDiscordVal&sortField=Dienstnummer&sortDir=@(sortField=="Dienstnummer"&&sortDir=="asc"?"desc":"asc")"
                           class="flex items-center gap-1">
                            Dienstnummer
                            @if(sortField=="Dienstnummer") {
                                <i class="fa-solid @(sortDir=="asc"?"fa-arrow-up":"fa-arrow-down") text-xs"></i>
                            }
                        </a>
                    </th>
                    <th class="px-4 py-3 text-left">Benutzername</th>
                    <th class="px-4 py-3 text-left">Name</th>
                    <th class="px-4 py-3 text-left">Discord</th>
                    <th class="px-4 py-3 text-left">
                        <a href="?page=1&search=@searchTerm&onlyDiscord=@onlyDiscordVal&sortField=Status&sortDir=@(sortField=="Status"&&sortDir=="asc"?"desc":"asc")"
                           class="flex items-center gap-1">
                            Status
                            @if(sortField=="Status") {
                                <i class="fa-solid @(sortDir=="asc"?"fa-arrow-up":"fa-arrow-down") text-xs"></i>
                            }
                        </a>
                    </th>
                    <th class="px-4 py-3 text-left">Letzter Login</th>
                    <th class="px-4 py-3 text-left">Rollen</th>
                    <th class="px-4 py-3 text-right">Aktionen</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                @foreach (var item in Model)
                {
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition">
                        <td class="px-4 py-3">@item.User.Dienstnummer</td>
                        <td class="px-4 py-3">@item.User.UserName</td>
                        <td class="px-4 py-3">@item.User.Displayname</td>
                        <td class="px-4 py-3">@item.User.DiscordId</td>
                        <td class="px-4 py-3">
                            @if(item.User.Status == true)
                            {
                                <span class="px-2 py-1 text-xs font-semibold rounded bg-green-100 text-green-800">Angestellt</span>
                            }
                            else
                            {
                                <span class="px-2 py-1 text-xs font-semibold rounded bg-red-100 text-red-800">Gekündigt</span>
                            }
                        </td>
                        <td class="px-4 py-3">@item.User.LastLogin?.ToString("g")</td>
                        <td class="px-4 py-3">
                            @foreach (var roleName in item.Roles)
                            {
                                var role = await RoleManager.FindByNameAsync(roleName);
                                var hex  = role?.ColorHex ?? "#999";
                                var txt  = ColorUtils.GetContrastingTextColor(hex);
                                <span class="px-2 py-1 rounded text-xs font-medium mr-1" style="background-color:@hex;color:@txt">
                                    @roleName
                                </span>
                            }
                        </td>
                        <td class="px-4 py-3 text-right space-x-2 whitespace-nowrap">
                            <button onclick="openEditUserModal('@item.User.Id')" class="text-blue-600 hover:underline">
                                <i class="fa-solid fa-pen-to-square mr-1"></i> Bearbeiten
                            </button>
                            @if (item.User.Id != User.FindFirstValue(ClaimTypes.NameIdentifier))
                            {
                                <button onclick="openDeleteUserModal('@item.User.Id')" class="text-red-600 hover:underline">
                                    <i class="fa-solid fa-trash mr-1"></i> Löschen
                                </button>
                            }
                            else
                            {
                                <span class="text-gray-400 italic">Eigener Account</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    @if(totalPages > 1)
    {
        <nav class="mt-4 flex justify-center">
            <ul class="inline-flex -space-x-px">
                @for(int p = 1; p <= totalPages; p++)
                {
                    var isCurrent = p == currentPage;
                    <li>
                        <a href="?page=@p&search=@searchTerm&onlyDiscord=@onlyDiscordVal&sortField=@sortField&sortDir=@sortDir"
                           class="px-3 py-1 border @((isCurrent ? "bg-indigo-600 text-white" : "bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300")) hover:bg-indigo-500 hover:text-white">
                            @p
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }

    <div id="modalContainer"></div>

    @section Scripts {
        <script>
            function openCreateUserModal() {
                fetch('/Users/Create')
                    .then(res => res.text())
                    .then(html => {
                        document.getElementById('modalContainer').innerHTML = html;
                        document.getElementById('createUserModal').classList.remove('hidden');
                    });
            }
            function toggleModal(id) {
                document.getElementById(id).classList.toggle('hidden');
            }
            function openEditUserModal(id) {
                fetch(`/Users/Edit/${id}`)
                    .then(res => res.text())
                    .then(html => {
                        document.getElementById('modalContainer').innerHTML = html;
                        document.getElementById('editUserModal').classList.remove('hidden');
                    });
            }
            function openDeleteUserModal(id) {
                fetch(`/Users/Delete/${id}`)
                    .then(res => res.text())
                    .then(html => {
                        document.getElementById('modalContainer').innerHTML = html;
                        document.getElementById('deleteUserModal').classList.remove('hidden');
                    });
            }
        </script>
    }
</div>
