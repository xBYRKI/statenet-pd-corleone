@addTagHelper *, Microsoft.AspNetCore.Authorization.TagHelpers
@model IEnumerable<statenet_lspd.ViewModels.PaygradeViewModel>
@using statenet_lspd.Models   @* Für nameof(Permission.Paygrade_*) *@
@using Microsoft.AspNetCore.Authorization  @* für IAuthorizationService *@
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService AuthorizationService
@{
    ViewData["Title"] = "Besoldungsstufen";
}

@* DEBUG-Bereich: Zeigt, ob der User die Policies hat *@
@{
    var canCreate = (await AuthorizationService.AuthorizeAsync(User, nameof(Permission.Paygrade_Create))).Succeeded;
    var canEdit   = (await AuthorizationService.AuthorizeAsync(User, nameof(Permission.Paygrade_Edit))).Succeeded;
    var canDelete = (await AuthorizationService.AuthorizeAsync(User, nameof(Permission.Paygrade_Delete))).Succeeded;
}
<div class="max-w-7xl mx-auto mt-10 px-6 py-8 bg-white dark:bg-gray-800 rounded-lg shadow-md">

    <div class="flex flex-col md:flex-row md:justify-between md:items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
            <i class="fa-solid fa-layer-group text-green-600"></i> Besoldungsstufen
        </h1>

        @* “Neue Besoldungsstufe” nur wenn Paygrade_Create *@
        @if (canCreate)
        {
            <button onclick="openCreatePaygradeModal()"
                    class="inline-flex items-center bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded shadow-sm">
                <i class="fa-solid fa-plus mr-2"></i> Neue Besoldungsstufe
            </button>
        }
    </div>

    <div class="overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700">
        <table class="min-w-full table-auto text-sm">
            <thead class="bg-gray-50 dark:bg-gray-700 text-gray-600 dark:text-gray-200">
                <tr>
                    <th class="px-4 py-3 text-left">Besoldungsstufe</th>
                    <th class="px-4 py-3 text-left">Discord-Rollen-ID</th>
                    <th class="px-4 py-3 text-left">Anzahl Nutzer</th>
                    <th class="px-4 py-3 text-right">Aktionen</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                @foreach (var pg in Model)
                {
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition">
                        <td class="px-4 py-3">@pg.Besoldung</td>
                        <td class="px-4 py-3">@pg.DiscordRoleId</td>
                        <td class="px-4 py-3">@pg.UserCount</td>
                        <td class="px-4 py-3 text-right space-x-2 whitespace-nowrap">

                            @* Bearbeiten nur wenn Paygrade_Edit *@
                            @if (canEdit)
                            {
                                <button onclick="openEditPaygradeModal(@pg.Id)"
                                        class="text-blue-600 hover:underline">
                                    <i class="fa-solid fa-pen-to-square mr-1"></i> Bearbeiten
                                </button>
                            }

                            @* Löschen nur wenn Paygrade_Delete *@
                            @if (canDelete)
                            {
                                <button onclick="openDeletePaygradeModal(@pg.Id)"
                                        class="text-red-600 hover:underline">
                                    <i class="fa-solid fa-trash mr-1"></i> Löschen
                                </button>
                            }

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div id="modalContainer"></div>
</div>

@section Scripts {
    <script>
        function openCreatePaygradeModal() {
            fetch('/Paygrades/Create')
                .then(res => res.text())
                .then(html => {
                    document.getElementById('modalContainer').innerHTML = html;
                    document.getElementById('createPaygradeModal').classList.remove('hidden');
                });
        }
        function openEditPaygradeModal(id) {
            fetch(`/Paygrades/Edit/${id}`)
                .then(res => res.text())
                .then(html => {
                    document.getElementById('modalContainer').innerHTML = html;
                    document.getElementById('editPaygradeModal').classList.remove('hidden');
                });
        }
        function openDeletePaygradeModal(id) {
            fetch(`/Paygrades/Delete/${id}`)
                .then(res => res.text())
                .then(html => {
                    document.getElementById('modalContainer').innerHTML = html;
                    document.getElementById('deletePaygradeModal').classList.remove('hidden');
                });
        }
    </script>
}